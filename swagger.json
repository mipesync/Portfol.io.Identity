{
  "openapi": "3.0.1",
  "info": {
    "title": "Portfol.io.Identity",
    "version": "1.0"
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticates the user.",
        "description": "Issues an access token and, if \"remember me\" is true, issues a refresh token.\r\nSample request:\r\n\r\n    POST: /api/auth/login\r\n    {\r\n        username: user,\r\n        password: 12345678,\r\n        rememberMe: true,\r\n        returnUrl: http://example.com/catalog\r\n    }",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "If invalid login attempt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "If user account locked out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a user",
        "description": "Sample request:\r\n\r\n    POST: /api/auth/register\r\n    {\r\n        username: user,\r\n        email: user@example.com,\r\n        password: 12345678,\r\n        roleId: 4C2C522E-F785-4EB4-8ED7-260861453330,\r\n        returnUrl: http://example.com/catalog\r\n    }",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "204": {
            "description": "If none of the conditions are met."
          },
          "400": {
            "description": "If there were errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If role not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/forgot_password": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "When the user is forgot the password.",
        "description": "Sends a confirmation email. Sample request: \r\n\r\n    GET: /api/auth/forgot_password?email=user@example.com",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user's email address to which the confirmation email will be sent.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "If user does not exist or is not confirmed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/reset_password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Resets the password.",
        "description": "Accepts the code that was sent to the mail. Sample request:\r\n\r\n    POST: /api/auth/reset_password\r\n    {\r\n        email: user@example.com,\r\n        code: your code,\r\n        password: 12345678\r\n    }",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "If none of the conditions are met."
          },
          "400": {
            "description": "if there were errors during password reset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/confirm_email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Email confirmation.",
        "description": "Sends a confirmation email. Sample request:\r\n\r\n    POST: /api/auth/confirm_email?userId=4C2C522E-F785-4EB4-8ED7-260861453330&code=your_code&returnUrl=http://example.com/catalog",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnUrl",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmEmailResponse"
                }
              }
            }
          },
          "204": {
            "description": "If userId or code is null."
          },
          "400": {
            "description": "if an error occurred while email confirmation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/reconfirm_email": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Resends the confirmation email.",
        "description": "Resends the confirmation email if the previous one was not delivered.\r\nSample request:\r\n\r\n    GET: /api/auth/reconfirm_email?email=user@example.com&returnUrl=http://example.com/catalog",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user's email address to which the confirmation email will be sent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnUrl",
            "in": "query",
            "description": "The return URL to which the user will be returned after confirmation of the mail.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "If model is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh_token": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Refreshes the access token and refresh token.",
        "description": "Sample request:\r\n\r\n    PUT: /api/auth/refresh_token\r\n    {\r\n        access_token = jwt token,\r\n        refresh_token: your refresh token\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "if invalid access token or refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/revoke": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh token revocation.",
        "description": "Sample request:\r\n\r\n    DELETE: /api/auth/revoke?userId=4C2C522E-F785-4EB4-8ED7-260861453330",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the user to revoke the refresh token from.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeess"
          },
          "204": {
            "description": "If none of the conditions are met.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "if there were errors during password reset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/get_roles": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of available roles.",
        "description": "Sample request:\r\n\r\n    GET: /api/user/get_roles",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleViewModel"
                }
              }
            }
          },
          "404": {
            "description": "If roles not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/get_user_by_id": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by id",
        "description": "Sample request:\r\n\r\n    GET /api/user/get_user_by_id?userId=33A5A12A-99A4-4770-80C4-C140F28B6E61",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User Id to find",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLookupDto"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/get_users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of user",
        "description": "Sample request:\r\n\r\n    GET /api/user/get_users",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersViewModel"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/change_email": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Change email",
        "description": "Sends a message with a link to change email. Sample request:\r\n\r\n    GET /api/user/change_email?userId=user@example.com&newEmail=newUser@example.com",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user whose email needs to be changed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newEmail",
            "in": "query",
            "description": "New user email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "If model is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "If the user is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/confirm_change_email": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Email change confirmation",
        "description": "Sample request:\r\n\r\n    POST: /api/user/confirm_change_email?userId=33A5A12A-99A4-4770-80C4-C140F28B6E61&newEmail=newUser@example.com&code=your_code",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user whose email needs to be changed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newEmail",
            "in": "query",
            "description": "New user email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Confirmation code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "If none of the conditions are met."
          },
          "400": {
            "description": "If there were errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "If the user is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/change_phone": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Change phone",
        "description": "Sends an SMS message with a confirmation code. Sample request:\r\n\r\n    GET /api/user/change_phone?userId=33A5A12A-99A4-4770-80C4-C140F28B6E61&newPhoneNumber=89121234567",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user whose phone needs to be changed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newPhoneNumber",
            "in": "query",
            "description": "New user phone",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "If model is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "If the user is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/confirm_change_phone": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Phone change confirmation",
        "description": "Sample request:\r\n\r\n    POST /api/user/change_phone?userId=33A5A12A-99A4-4770-80C4-C140F28B6E61&newPhoneNumber=89121234567&code=your_code",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user whose phone needs to be changed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newPhoneNumber",
            "in": "query",
            "description": "New user phone",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Confirmation code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "If none of the conditions are met."
          },
          "400": {
            "description": "If there were errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "If the user is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/update_user_details": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "User details update",
        "description": "To update user data: name, description, date of birth. Sample request:\r\n\r\n    PUT /api/user/update_user_details\r\n    {\r\n        id: 33A5A12A-99A4-4770-80C4-C140F28B6E61,\r\n        name: Ivanov Ivan Ivanovich,\r\n        description: I'm Ivan,\r\n        dateOfBirth: 0000-00-00\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDetailsViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDetailsViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDetailsViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "If none of the conditions are met."
          },
          "400": {
            "description": "If there were errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "If the user is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/update_profile_image": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update profile image",
        "description": "Sample request:\r\n\r\n    PUT: /api/user/update_profile_image?userId=33A5A12A-99A4-4770-80C4-C140F28B6E61\r\n    Form object: file=file_object; type: image/jpeg",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user whose profile image needs to be updated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "If the file extension is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "If the user is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/remove_profile_image": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove profile image",
        "description": "Sets the default profile image. Sample request:\r\n\r\n    DELETE: /api/user/remove_profile_image?userId=33A5A12A-99A4-4770-80C4-C140F28B6E61",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user whose profile image needs to be deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "If the user is wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfirmEmailResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "nullable": true
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token": {
            "type": "string",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginViewModel": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 8,
            "type": "string",
            "format": "password"
          },
          "rememberMe": {
            "type": "boolean"
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "nullable": true
          },
          "expire": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RefreshTokenViewModel": {
        "required": [
          "accessToken",
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "accessToken": {
            "minLength": 1,
            "type": "string"
          },
          "refreshToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterViewModel": {
        "required": [
          "email",
          "password",
          "roleId",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 8,
            "type": "string",
            "format": "password"
          },
          "roleId": {
            "minLength": 1,
            "type": "string"
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordViewModel": {
        "required": [
          "code",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 8,
            "type": "string",
            "format": "password"
          }
        },
        "additionalProperties": false
      },
      "RoleLookupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleViewModel": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleLookupDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateUserDetailsViewModel": {
        "required": [
          "dateOfBirth",
          "description",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UserLookupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "profileImagePath": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "dateOfCreation": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UsersViewModel": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLookupDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Insert JWT with Bearer into field",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}